<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://han-joon-hyeok.github.io/</id><title>Dev Joon</title><subtitle>blog, jekyll, portfolio, github, 개발, TIL, 공부, 블로그,</subtitle> <updated>2025-10-26T20:01:21+09:00</updated> <author> <name>Joon Hyeok Han</name> <uri>https://han-joon-hyeok.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://han-joon-hyeok.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://han-joon-hyeok.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator> <rights> © 2025 Joon Hyeok Han </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[C언어] 자료형 크기 차이로 인한 비트 연산 오류 해결 방법</title><link href="https://han-joon-hyeok.github.io/posts/c-bitwise-operation-between-different-integer-sizes/" rel="alternate" type="text/html" title="[C언어] 자료형 크기 차이로 인한 비트 연산 오류 해결 방법" /><published>2025-10-17T09:40:00+09:00</published> <updated>2025-10-26T19:56:54+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/c-bitwise-operation-between-different-integer-sizes/</id> <content src="https://han-joon-hyeok.github.io/posts/c-bitwise-operation-between-different-integer-sizes/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="c" /> <summary> 개요 C언어에서 서로 다른 크기를 가진 자료형을 비트 연산할 때 발생할 수 있는 문제와 해결 방법을 정리했다. 이 글은 “C언어 매크로 재정의 오류 원인과 해결 방법”의 후속 글이다. 문제 상황 AND 연산을 수행하는 매크로 함수에서, 매개변수의 자료형 크기 차이로 인해 의도치 않게 상위 32비트가 소실되는 문제가 발생했다. #define AND_BIT_OPERATION(a, b) ((a) &amp;amp;= ~(b)) 이때 사용된 비트 상수는 다음과 같다. (0번째 비트는 가장 우측에 있는 비트를 의미한다.) // 32비트 크기 (BIT_31) #define BIT_31 0x80000000 // 64비트 크기 unsigned long long data = 0xFFFFFFFFFFFFFFFFUL... </summary> </entry> <entry><title>[C언어] 매크로 재정의 오류 원인과 해결 방법 (GCC 전처리기 기준)</title><link href="https://han-joon-hyeok.github.io/posts/gcc-macro-redefined-error-fix/" rel="alternate" type="text/html" title="[C언어] 매크로 재정의 오류 원인과 해결 방법 (GCC 전처리기 기준)" /><published>2025-10-14T14:40:00+09:00</published> <updated>2025-10-14T14:40:00+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/gcc-macro-redefined-error-fix/</id> <content src="https://han-joon-hyeok.github.io/posts/gcc-macro-redefined-error-fix/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="c" /> <summary> 실행 환경 OS: Ubuntu 22.04 Architecture: x86_64 (64-bit) GCC: 11.4.0 요약 동일한 이름의 매크로를 서로 다른 방식으로 정의하면 GCC 전처리기가 두 매크로를 동일하지 않은 토큰으로 판단해 redefined 오류가 발생한다. 안전하게 프로그램을 설계하려면 #ifndef 전처리기 사용 또는 헤더 파일 정의 원칙을 지키면 해결 가능하다. 문제 상황 make를 이용해서 컴파일을 수행하던 중, 매크로 상수가 재정의(redefined)되었다는 오류가 발생했다. Compiling debug.c debug.c:667:1: error: "BIT_0" redefined In file included from include/sys_include.h:... </summary> </entry> <entry><title>생각 많은 ISTJ 개발자가 구글 캘린더를 활용하는 방법</title><link href="https://han-joon-hyeok.github.io/posts/google-calendar-organization-tips/" rel="alternate" type="text/html" title="생각 많은 ISTJ 개발자가 구글 캘린더를 활용하는 방법" /><published>2025-10-05T20:35:00+09:00</published> <updated>2025-10-05T20:35:00+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/google-calendar-organization-tips/</id> <content src="https://han-joon-hyeok.github.io/posts/google-calendar-organization-tips/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="Productivity" /> <summary> 개요 구글 캘린더로 일정과 할 일을 관리하는 방법을 정리했다. 평소에 생각이 많다보니 생각을 정리하는 나름의 체계를 갖추고자 했다. 단순히 일정을 기록하는 것이 아니라, 머릿속을 비워두기 위한 시스템으로서의 캘린더 사용법이다. 일정 관리 구글 캘린더에서는 목적에 맞는 캘린더를 생성하는 것이 가능하다. 전체 캘린더에 표시되는 블럭을 색깔로 구분할 수 있기 때문에 일정이 어느 범주에 속해있는지 시각적으로 인지하기 쉽다. 예를 들어, 주황색(개인 일정)이나 노란색(친목)이 지나치게 많다면 휴식이 부족하다는 신호다. 현재 여섯 종류의 캘린더를 사용하고 있으며, 목록은 다음과 같다. 개인 일정(주황색): 아래의 범주들에 해당하지 않는 일정 건강(초록색): 병원, 운동과 관련된 일정 본업... </summary> </entry> <entry><title>[AWS] EC2 인스턴스 ssh 키 없이 터미널 접속하는 방법 (AWS Session Manager)</title><link href="https://han-joon-hyeok.github.io/posts/connect-to-ec2-without-ssh-key-using-session-manager/" rel="alternate" type="text/html" title="[AWS] EC2 인스턴스 ssh 키 없이 터미널 접속하는 방법 (AWS Session Manager)" /><published>2025-09-08T21:35:00+09:00</published> <updated>2025-09-08T21:38:33+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/connect-to-ec2-without-ssh-key-using-session-manager/</id> <content src="https://han-joon-hyeok.github.io/posts/connect-to-ec2-without-ssh-key-using-session-manager/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="AWS" /> <summary> 개요 AWS EC2 인스턴스에 접속할 SSH 키가 없는 경우, Session Manager를 이용해서 터미널에 접속하는 방법을 소개한다. 문제 상황 개인 목적으로 EC2 인스턴스 1대를 운영하고 있다. 평소에 SSH 키를 이용해서 터미널에 접속했다. crontab을 수정할 일이 생겼는데, 메인 PC는 물리적으로 사용할 수 없는 위치에 있었고, 서브 PC만 사용할 수 있는 상황이었다. 하지만 SSH 키 파일이 메인 PC에만 있었고, 서브 PC에는 없었다. 이런 경우에도 EC2에 접속할 수 있는 방법을 찾아내고자 했다. 해결 방법 AWS의 Session Manager를 이용하면 SSH 키 없이도 터미널에 접속할 수 있다. 1. Session Manager를 통한 접속 접속할 ... </summary> </entry> <entry><title>LLR, CSF, RDI 개념 정리</title><link href="https://han-joon-hyeok.github.io/posts/link-fault-propagation-llcf-llr-rdi-csf/" rel="alternate" type="text/html" title="LLR, CSF, RDI 개념 정리" /><published>2025-09-01T15:45:00+09:00</published> <updated>2025-09-01T15:45:00+09:00</updated> <id>https://han-joon-hyeok.github.io/posts/link-fault-propagation-llcf-llr-rdi-csf/</id> <content src="https://han-joon-hyeok.github.io/posts/link-fault-propagation-llcf-llr-rdi-csf/" /> <author> <name>Joon Hyeok Han</name> </author> <category term="Network" /> <summary> LLR(Link Ross Return) LLR은 한쪽 포트에서 송신부(TX) 신호가 꺼졌을 때, 상대편 포트에도 동일하게 Link Down 상태를 반영해주는 기능이다. 한쪽 방향만 죽어있는 비대칭 링크 상태를 방지하고, 양단이 동시에 링크 다운을 인지하도록 하기 위해서 사용한다. LLCF와 다른 점은 LLCF는 수신부(RX) 장애를 반대편으로 전달하는 것이고, LLR은 송신부(TX) 장애를 반대편으로 전달하는 것이다. 동작 예시 장비 A의 TX를 Shutdown 시킴 장비 B는 RX에서 신호를 받지 못해서 Link Down 인식 LLR 기능이 켜져 있다면, 장비 B는 자신의 TX를 끊어 장비 A로 보내는 신호를 내림 양단 모두 Link Down 상태가 되고, 절체와 같은 상위 동... </summary> </entry> </feed>
