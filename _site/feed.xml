

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://han-joon-hyeok.github.io/</id>
  <title>기억보다는 기록을</title>
  <subtitle>blog, jekyll, portfolio, github, 개발, TIL, 공부, 블로그,</subtitle>
  <updated>2021-02-21T13:58:00+09:00</updated>
  <author>
    <name>Joon Hyeok Han</name>
    <uri>https://han-joon-hyeok.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://han-joon-hyeok.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="https://han-joon-hyeok.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Joon Hyeok Han </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>자료구조 - 이중 연결 리스트(Doubly Linked List)</title>
    <link href="https://han-joon-hyeok.github.io/posts/Doubly-Linked-List/" rel="alternate" type="text/html" title="자료구조 - 이중 연결 리스트(Doubly Linked List)" />
    <published>2021-02-21T08:45:00+09:00</published>
  
    <updated>2021-02-21T08:45:00+09:00</updated>
  
    <id>https://han-joon-hyeok.github.io/posts/Doubly-Linked-List/</id>
    <content src="https://han-joon-hyeok.github.io/posts/Doubly-Linked-List/" />
    <author>
      <name>Joon Hyeok Han</name>
    </author>

  
    
    <category term="Data Structure" />
    
  

  
    <summary>
      





      
  프로그래머스 - 어서와! 자료구조와 알고리즘은 처음이지?를 공부하며 정리한 내용입니다.


10강. 양방향(이중) 연결 리스트

양방향(이중) 연결 리스트는 노드끼리 서로 연결되어 있는 리스트를 의미한다.



일반적인 연결 리스트는 한 방향으로(head에서 tail로)만 진행된다면, 양방향 연결 리스트는 앞, 뒤로도 진행이 가능하다.

그래서 노드를 생성할 때, prev에 대한 정보를 함께 포함하게 된다.



그리고 dummy 노드를 리스트 처음과 끝에 모두 두어야 데이터를 담고 있는 노드들은 모두 같은 형태를 띄고, 다양한 기능을 구현하는데 있어 편리해진다는 장점이 생긴다.





빨간색 글자로 표시된 부분이 기존 연결 리스트의 생성자에서 추가된 부분이다.

연결 리스트 순회

def tr...
    </summary>
  

  </entry>

  
  <entry>
    <title>자료구조 - dummy head를 가지는 연결 리스트(Linked Lists) 노드 삭제</title>
    <link href="https://han-joon-hyeok.github.io/posts/Linked-List-Node-Pop-After/" rel="alternate" type="text/html" title="자료구조 - dummy head를 가지는 연결 리스트(Linked Lists) 노드 삭제" />
    <published>2021-02-14T14:54:00+09:00</published>
  
    <updated>2021-02-15T17:57:24+09:00</updated>
  
    <id>https://han-joon-hyeok.github.io/posts/Linked-List-Node-Pop-After/</id>
    <content src="https://han-joon-hyeok.github.io/posts/Linked-List-Node-Pop-After/" />
    <author>
      <name>Joon Hyeok Han</name>
    </author>

  
    
    <category term="Data Structure" />
    
  

  
    <summary>
      





      
  프로그래머스 - 어서와! 자료구조와 알고리즘은 처음이지?를 공부하며 정리한 내용입니다.


9강. dummy head를 가지는 연결 리스트 노드 삭제

연습문제


  제 9 강에서 소개된 추상적 자료구조 LinkedList 는 dummy head node 를 가지는 연결 리스트입니다. 이 클래스의 아래와 같은 메서드들을, 강의 내용에 소개된 요구조건을 만족시키도록 구현하세요.
  popAfter()
popAt()
  
  이 때, popAt() 메서드의 구현에서는 popAfter() 를 호출하여 이용하도록 합니다. (그렇게 하지 않을 수도 있지만, 여기에서는 popAfter() 의 이용에 의해서 코드 구현이 보다 쉬워지는 것을 확인하기 위함입니다.)
초기 코드로 들어 있는 것은 solution(...
    </summary>
  

  </entry>

  
  <entry>
    <title>Javascript - 시,분,초 D-Day 실시간 계산기 만들기</title>
    <link href="https://han-joon-hyeok.github.io/posts/Javascript-Dday/" rel="alternate" type="text/html" title="Javascript - 시,분,초 D-Day 실시간 계산기 만들기" />
    <published>2021-02-10T20:24:00+09:00</published>
  
    <updated>2021-02-13T23:36:26+09:00</updated>
  
    <id>https://han-joon-hyeok.github.io/posts/Javascript-Dday/</id>
    <content src="https://han-joon-hyeok.github.io/posts/Javascript-Dday/" />
    <author>
      <name>Joon Hyeok Han</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      우선 javascript에서 시간을 계산하는 방법은 다음과 같다.


  Javascript의 getTime() 메소드는 현재 시간을 1970년 1월 1일 이후로부터 경과한 시간을 millisecond(ms) 단위로 계산을 한다.
  1초 = 1000ms 이라는 점을 활용하면 일, 시, 분, 초까지 구할 수 있다.
    
      초 : 1ms * 1000는 1초
      분 : 1ms * 1000가 1초니까 여기서 60을 곱하면 1분
      시 : 1ms * 1000 * 60은 1분이니까, 60을 곱하면 1시간
      일 : 1ms * 1000 * 60 * 60은 1시간이니까, 24를 곱하면 1일
    
  
  하지만 밀리세컨드는 소수점 단위로 딱 맞게 떨어지지 않아서 남은 기간이 1...
    </summary>
  

  </entry>

  
  <entry>
    <title>Javascript - EventHandler를 object에 넣기</title>
    <link href="https://han-joon-hyeok.github.io/posts/Javascript-EventHandler/" rel="alternate" type="text/html" title="Javascript - EventHandler를 object에 넣기" />
    <published>2021-02-10T20:24:00+09:00</published>
  
    <updated>2021-02-10T20:24:00+09:00</updated>
  
    <id>https://han-joon-hyeok.github.io/posts/Javascript-EventHandler/</id>
    <content src="https://han-joon-hyeok.github.io/posts/Javascript-EventHandler/" />
    <author>
      <name>Joon Hyeok Han</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      const로 정의한 object에 handler를 저장하고, 이를 외부에서 실행하는 방법은 다음과 같다.

let text = document.querySelector("body h2");
const Handler = {
    mouserOver: function(){
        text.innerHTML = "Mouse is on"
        text.style.color = "#ff9999"
    }
}

function init(){
    text.addEventListner("mouseOver", Handler.mouseOver);
}

init()


외부에서 해당 handler를 실행하고자 하면, 객체명.key값으로 접근해서 실행한다.


    </summary>
  

  </entry>

  
  <entry>
    <title>자료구조 - 연결 리스트(Linked Lists) 노드 삭제</title>
    <link href="https://han-joon-hyeok.github.io/posts/Linked-List-Node-Pop/" rel="alternate" type="text/html" title="자료구조 - 연결 리스트(Linked Lists) 노드 삭제" />
    <published>2021-02-08T09:00:00+09:00</published>
  
    <updated>2021-02-08T09:00:00+09:00</updated>
  
    <id>https://han-joon-hyeok.github.io/posts/Linked-List-Node-Pop/</id>
    <content src="https://han-joon-hyeok.github.io/posts/Linked-List-Node-Pop/" />
    <author>
      <name>Joon Hyeok Han</name>
    </author>

  
    
    <category term="Data Structure" />
    
  

  
    <summary>
      





      
  프로그래머스 - 어서와! 자료구조와 알고리즘은 처음이지?를 공부하며 정리한 내용입니다.


8강. 연결 리스트 노드 삭제하기

연습문제


  제 8 강에서 소개된 추상적 자료구조 LinkedList 클래스의 메서드로서 popAt() 메서드를 강의 내용에 소개된 요구조건을 만족시키도록 구현하세요.
초기 코드로 들어 있는 것은 solution() 함수를 포함하여 다른 부분은 수정하지 말고, def popAt(self, pos): 의 메서드 몸체만 구현하세요.
만약, 인자로 주어진 pos 가 올바른 범위의 값을 가지지 않는 경우에는 IndexError exception 을 발생시키도록 합니다. 이렇게 하기 위한 코드는 raise IndexError 입니다.
*** 2020년 3월 23일, 학습자의 질...
    </summary>
  

  </entry>

</feed>


